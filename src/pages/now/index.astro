---
import RootLayout from '@layouts/root-layout.astro';
import { BaseHead } from '@components/seo';
import { getCollection } from 'astro:content';
import { Header } from '@components/misc';

// Obtener y ordenar las entradas
const entries = await getCollection('now');
entries.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Renderizar el contenido antes de la plantilla
const renderedEntries = await Promise.all(
	entries.map(async (entry) => {
		const rendered = await entry.render(); // Se obtiene el contenido renderizado
		return { ...entry, Content: rendered.Content };
	})
);

// Función para formatear fecha
function formatDate(date: Date) {
  return new Intl.DateTimeFormat('es-ES', {
    weekday: 'long',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  })
    .format(date)
    .replace(',', '')
    .replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$3.$2.$1');
}

// Agrupar entradas por mes
const groupedEntries = renderedEntries.reduce((acc, entry) => {
  const date = entry.data.pubDate;
  const yearMonth = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
  
  if (!acc[yearMonth]) {
    acc[yearMonth] = [];
  }
  
  acc[yearMonth].push(entry);
  return acc;
}, {});
---

<!doctype html>
<html lang="es">
	<head>
		<BaseHead title="Now" description="Actualizaciones breves sobre mi día a día" />
	</head>
	<RootLayout>
		<div
			id="navbar+title"
			class="flex flex-col w-full gap-6 max-w-xl">
			<Header />
			<h1 class="w-full text-7xl font-medium tracking-tight mb-6">/now</h1>
			<div
				id="grouped-entries"
				class="grid grid-cols-10 gap-3">
				{
					Object.entries(groupedEntries).map(([yearMonth, entries]) => {
						const [year, month] = yearMonth.split('-');
						const date = new Date(Number(year), Number(month) - 1);
						const monthName = date.toLocaleString('es-ES', { month: 'long' });
						const entriesCount = entries.length;
						return (
							<div class="col-span-10 mb-6">
								<div class="flex flex-row items-center justify-between font-medium">
									<h2 class="text-lg tracking-tight mb-6">
										{monthName} {year}
									</h2>
									<span class="text-gray-500">{entriesCount} notas</span>
								</div>
								<div class="grid grid-cols-10 gap-3">
									{entries.map((entry) => {
										const { Content } = entry;
										return (
											<article class="col-span-10 mb-6">
												<h2 class="text-sm font-bold">{entry.data.title}</h2>
												<p class="text-sm text-gray-500">
													{formatDate(entry.data.pubDate)}
												</p>
												<div class="text-sm mt-2">
													<Content />
												</div>
												<hr class="mt-4 border-gray-300" />
											</article>
										);
									})}
								</div>
							</div>
						);
					})
				}
			</div>
		</div>
	</RootLayout>
</html>