---
import RootLayout from '@layouts/root-layout.astro';
import { BaseHead } from '@components/seo';
import { getCollection } from 'astro:content';
import { Header } from '@components/misc';

// Obtener y ordenar las entradas
const entries = await getCollection('now');
entries.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Renderizar el contenido antes de la plantilla
const renderedEntries = await Promise.all(
	entries.map(async (entry) => {
		const rendered = await entry.render(); // Se obtiene el contenido renderizado
		return { ...entry, Content: rendered.Content };
	})
);

// Función para formatear fecha
function formatDate(date: Date) {
  return new Intl.DateTimeFormat('es-ES', {
    weekday: 'long',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  })
    .format(date)
    .replace(',', '')
    .replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$3.$2.$1');
}
---

<!DOCTYPE html>
<html lang="es">
<head>
	<BaseHead title="Now" description="Actualizaciones breves sobre mi día a día" />
</head>
<body>
	<RootLayout>
		<div class="max-w-xl mx-auto flex flex-col gap-6">
			<Header />

			<section class="max-w-xl mx-auto">
				<h1 class='w-full text-7xl font-medium tracking-tight mb-6'>/now</h1>
				{
					renderedEntries.map(entry => {
						const { Content } = entry;
						return (
							<article class="mb-6">
								<h2 class="text-sm font-bold">{entry.data.title}</h2>
								<p class="text-sm text-gray-500">
									{formatDate(entry.data.pubDate)}
								</p>
								<div class="text-sm">
									<Content />
								</div>
								<hr class="mt-4 border-gray-300" />
							</article>
						);
					})
				}
			</section>
		</div>
	</RootLayout>
</body>
</html>